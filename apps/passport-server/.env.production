# This file is intended to be used as a starting point for local
# development. You should be able to copy it as-is into a file
# named `.env` as a sibling of this file, and be able to run the
# passport server and clientin a development mode where it neither
# reads nor writes to any external or 3rd party services, like the
# Zuzalu ticketing system or our email provider. You will be able
# to input any email into the login page email input, hit 'Generate
# Pass', and get logged into the passport as a test user. Then, you
# will also be able to use the consumer client to request proofs
# on behalf of this test user, with everything working properly
# and as expected.
##################################################################

# WARNING! Never set this environment variable in production!
# This variables tells the passport server to let anyone register
# even if they use a fake and invalid email. This is intended
# for development purposes only, so that you can run the entire
# application stack locally without depending on 3rd party services.
BYPASS_EMAIL_REGISTRATION=false

# The following environment variables connect the passport server
# to a postgres database that runs on the developer's machine. You
# can start a postgres instance locally by running the following
# commands from within the passport server application directory:
#
# yarn localdb:init
# yarn localdb:up
#
# To stop the postgres instance, you can run `yarn localdb:down`
#
# Alternatively, you could start a local postgres instance a different
# way. In any case, make sure these environment variables point to a
# working postgres database, and that the credentials you set here are
# correct, as that is necessary even for local development.
#
DATABASE_HOST=localhost
DATABASE_USERNAME=admin
DATABASE_PASSWORD=password
DATABASE_DB_NAME=postgres
DATABASE_SSL=false

# The port on which this server runs. We recommend `3002` for convenient
# local integration with the rest of the services that run within this
# repository.
PORT=3002

# The passport server needs to know where it itself can be accessed in order
# to be able to create URLs that point to itself.
PASSPORT_SERVER_URL="https://api.sbpass.ru"
PASSPORT_CLIENT_URL="https://sbpass.ru"

# To enable error reporting, both these environment variables must be set
#ROLLBAR_TOKEN=
#ROLLBAR_ENV_NAME=

# To enable server-issued PCDs, the server needs an RSA and an EdDSA private key. You can generate both
# using the following commands at the root of the project, after installing dependencies and building
# the project:
# node -e 'console.log(Buffer.from(new (require("node-rsa"))({b:2048}).exportKey("private")).toString("base64"))'
SERVER_RSA_PRIVATE_KEY_BASE64=LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbjFibmZLbzUzM3UwNU9PV2RKZCswczJrcm5xb3BmTkxKcDFaWXZ5eG9JYzloZ2xLCklmMG1yMjgrNlBpdnVCQUF5UFdFNDYxVmNHcm41R1VTS3ZOT3BQNkt5TW8wVjJvNFNhelZzT0RrN3RoOWlQa0kKd3Z6T0pIZENUZERZVlpSZzZEdW1nOW5JSis4bnB1RUJUbkdyUEV5TUZLazU4bmZRam44OExGLzNuTjNYQ2dWcApmOXh3bG12K2RQcDNOUjN5R3ljOVFWMUp6a1c3dmwreC9oY0duVFRDNXdhWE50OVRMWFRleGx0QWJIT2drcEZCCk85cldlYVdjcjl3Q0FEK2Q4L0pveENkNW91bnNIaU9aZUF4OTY1VmZPMldPR2haanJvYU9RK2hpU0R6MnRMT2gKTXUwK1huOXQyN2ZtSHZJTnZRSWlhQ3k5d2hpSE1ZMUpyS3hSZFFJREFRQUJBb0lCQUdORVkvRVJwLzVuOWxtRwp4QXdjK2FEaEJ0REFqK0xiUUoxczkrd29XNDBUMUN0MkRCNUN0V0FrWVVBSTlvZ29TQ1RxZUlEVFV1QTNhZ0tyClNQZERIMkxCUmJzejVnbnpuZCtnY256QWp6K1IxaHVJY29IdnQ0bVdWdE5kNGZqbStMeVZ0UFo5cmluYTM0d2kKcjRxc1hDNnp6YTF0aERGZm5hbTQ4TWNBZnFYVnZoUEFPaVcvQ3FKUFMzSHVMb25lS3RjTTVmQnNHbWpBaENmTgplUzgxQUFMMDdvZkVuU0VZRy9nY2pocFYzSUIzNXRLZm5kTUpDWk90a3lJR0czQU01Q3BYK2YwRG9mMHF5M3U4Ckp1c1EvUHZyYnZiRmgzZjJDS2ZrbVF0ejdoOSs3ZlFhNkowemxDSkl3aVJYa2o3VmtwVjduOVFsMzk0SlhVa3IKeW0reUR2MENnWUVBMzdQZlZ0M2hDT1VROGZXVklGM2RRZnErb09lamUwcEI5Vk4zOHpCUmRSK012dFIvcmN3UQpPYTQ5bkNxeHJtaHA4aTdVZHpwMDR0TXByN254YlVuaUxPeDZDZVJHbm5lakxUUWZTS3N6YXVhTUJmV1RXSWFUCndRWS8yQnlQSnp1clZ1NlFkaUYzems5Tmtycy9nNWluQldIQzZCQ3NkV25UNGl5Rnk2RFNRYThDZ1lFQXRsZ2wKbnpudmc3L0R3cDlac3ZYTHhCQmlUelZBclRYSENhTUg1Rmc0T2pmZStFbGJrdVlLQXpzSU1pR01DN1B4RHBBSgo5VVZoQ0Q0ekdhTWpPTCtlRnpjb3lmeGtBYjVoSWVDWVlwWkM3bWpQSzJ6QlRDVTBVWXhpcTR0aGtvNjhIUXNMCnpzcUgyMmROWGNUZmNzU0xGMVhTYy92Y0lGRTg2dnBBSlE4RDNCc0NnWUI4YzZsUXZtZXZkeUNTTzdvWEk2RXcKVDdzMThTaDJNcjIzS2hTVmF0QW1oTUxjZDRRQXdJSldWS1ZaK0RhWmZPVlVJdEY0ODBDTDRFWlV5UEdUaDRNWQowd2FoOGltSGg2OTBPb2NjK29IRWV6WnpLa2dxKzlPL2t5WjVxSW5MbmRxWXBtZ2dFRWFDdElQSG1meWZ6WkU5CjRVRjVzYTBBTlR2M25DVmpQN2s1YVFLQmdBNzhTNHM4YmF5OE05Qm8zQ3hTK3Y0UUFxUlQwZzdxSG9OeVBKSE4KbGtGaW1oWjVvT2IvdE03ektRZEZyb2Evc1EzclZJWXR2MzIzN3VjcWV4aU0xdWM5aDBLaVZXMjNRYkJSRHZUNwpPR0R6aUNNZmV2dFJDMjJ3UmVPblBzdVdvMnNYbjA3TllrRHJ5blhzV2hqS2drdldwOGNVYWREV0hGV0xYMzRzCkw3c0ZBb0dBWTV2My92K2J4UFkrQ3dIZmc1bnhnY0dkd3gzeURHUElRR1V0UVRyYi8rMXlyUXBxZmYyVm9sMUkKdWNQd1hqUzY0UGpzSUM4eWJLeGFGYnZqQlN5c0F1aHBEK3FiTjFub0J5NncyVTNTTnNYT1BBY3o3M0Vtb0lmdQp5VkhmSHNRTEZOdlR0RjhCQTRTekJ3UnIrZTB2V3NCbVdueWNiTjJJVitXbTVXU3IxSm89Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
# node -e 'console.log(require("@pcd/eddsa-pcd").newEdDSAPrivateKey())'
SERVER_EDDSA_PRIVATE_KEY=239a509abb28f2bc82ab4f301259d5fe4ac9261d438c2aeb2fecfdd16a30a4fa

# To enable notifications from the server to be sent to Discord
#DISCORD_TOKEN=
#DISCORD_ALERTS_CHANNEL_ID=

# For Telegram-gated authentication and anonymous message posting
TELEGRAM_BOT_TOKEN=
TELEGRAM_BOT_START_DELAY_MS=0

# For anonymous message posting rate limit (per topic)
MAX_DAILY_ANON_TOPIC_POSTS_PER_USER=3
# url for anon-message-client
#TELEGRAM_BOT_ANON_WEBSITE=
# generated telegram web app for anon-message-client
#TELEGRAM_ANON_BOT_WEBAPP=

# To disable syncing tickets from Pretix for local development
PRETIX_SYNC_DISABLED=

# If true, you have set up a local cert for dev.local for hot reloading locally with https
# https://github.com/proofcarryingdata/zupass/blob/main/bot.md#6-optional-hot-reloading-for-tg-development
IS_LOCAL_HTTPS=false

# Allow a maximum of this many account resets:
# ACCOUNT_RESET_LIMIT_QUANTITY=5
# .. Per this amount of time
# ACCOUNT_RESET_LIMIT_DURATION_MS=86400000 # 24 hours
# These values don't need to be explicitly configured as they have sane defaults.
# The limit can also just be disabled by setting this environment variable to 'true',
# which we've done here for local development
ACCOUNT_RESET_RATE_LIMIT_DISABLED='true'

# Set this to an integer value between 1 and the number of
# CPU cores you have available. The server offloads CPU-bound
# tasks to these workers
# WORKER_QUANTITY=

# The Telegram Bot Direct Link, created by DMing Botfather with /newapp
# eg: https://t.me/cha0sg0d_bot/anon
# Make sure that the web app url is set to PASSPORT_SERVER_URL/telegram/anon
# eg: https://dev.local:3002/telegram/anon
TELEGRAM_ANON_BOT_DIRECT_LINK=
# The anonymous message client, like https://dev.local:4000 or https://zk-tg.com
TELEGRAM_ANON_WEBSITE=

# The base URL for the Tripsha endpoint
ZUCONNECT_TRIPSHA_URL=
# Authentication key for Tripsha
ZUCONNECT_TRIPSHA_KEY=
# Zuconnect "mock" tickets will be issued to email addresses in this stringified JSON array
ZUCONNECT_MOCK_TICKETS='["test@example.com", "another@example.com"]'

# For Kudosbot's Telegram bot
TELEGRAM_KUDOSBOT_TOKEN=

# A stringified JSON array of email addresses whose Zupass user can manage FrogCrypto via UI and api routes
# e.g. '["test@example.com"]'
FROGCRYPTO_ADMIN_USER_EMAILS=

# The base URL for frogcrypto assets
FROGCRYPTO_ASSETS_URL=
